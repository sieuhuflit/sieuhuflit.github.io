"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8588],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(r),d=i,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||a;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4657:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const a={tags:["Binary Trees"]},o="Split Binary Tree",s={unversionedId:"medium/split_binary_tree",id:"medium/split_binary_tree",title:"Split Binary Tree",description:"Write a function that takes in a Binary Tree with at least one node and checks if that Binary Tree can be split into two Binary Trees of equal sum by removing a single edge. If this split is possible, return the new sum of each Binary Tree, otherwise return 0. Note that you do not need to return the edge that was removed.",source:"@site/docs/medium/split_binary_tree.md",sourceDirName:"medium",slug:"/medium/split_binary_tree",permalink:"/docs/medium/split_binary_tree",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/medium/split_binary_tree.md",tags:[{label:"Binary Trees",permalink:"/docs/tags/binary-trees"}],version:"current",lastUpdatedBy:"Sieu Thai",lastUpdatedAt:1696997789,formattedLastUpdatedAt:"Oct 11, 2023",frontMatter:{tags:["Binary Trees"]},sidebar:"tutorialSidebar",previous:{title:"Spiral Traverse",permalink:"/docs/medium/spiral_traverse"},next:{title:"Suffix Trie Construction",permalink:"/docs/medium/suffix_trie_construction"}},u={},l=[],c={toc:l},p="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"split-binary-tree"},"Split Binary Tree"),(0,i.kt)("admonition",{title:"Split Binary Tree",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Write a function that takes in a Binary Tree with at least one node and checks if that Binary Tree can be split into two Binary Trees of equal sum by removing a single edge. If this split is possible, return the new sum of each Binary Tree, otherwise return 0. Note that you do not need to return the edge that was removed."),(0,i.kt)("p",{parentName:"admonition"},"The sum of a Binary Tree is the sum of all values in that Binary Tree."),(0,i.kt)("p",{parentName:"admonition"},"Each BinaryTree node has an integer value, a left child node, and a right child node. Children nodes can either be BinaryTree nodes themselves or None / null."),(0,i.kt)("p",{parentName:"admonition"},"Sample Input"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"tree =     1\n        /     \\\n       3       -2\n     /   \\    /  \\\n    6    -5  5    2\n  /\n 2\n")),(0,i.kt)("p",{parentName:"admonition"},"Sample Output"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"6 // Remove the edge to the left of the root node,\n// creating two trees, each with sums of 6\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the tree and\n// h is the height of the tree\nfunction splitBinaryTree(tree) {\n  const desiredSubtreeSum = getTreeSum(tree) / 2;\n  const canBeSplit = trySubtrees(tree, desiredSubtreeSum)[1];\n  return canBeSplit ? desiredSubtreeSum : 0;\n}\n\nfunction trySubtrees(tree, desiredSubtreeSum) {\n  if (tree === null) return [0, false];\n\n  const [leftSum, leftCanBeSplit] = trySubtrees(tree.left, desiredSubtreeSum);\n  const [rightSum, rightCanBeSplit] = trySubtrees(tree.right, desiredSubtreeSum);\n\n  const currentTreeSum = tree.value + leftSum + rightSum;\n  const canBeSplit = leftCanBeSplit || rightCanBeSplit || currentTreeSum === desiredSubtreeSum;\n  return [currentTreeSum, canBeSplit];\n}\n\nfunction getTreeSum(tree) {\n  if (tree === null) return 0;\n  return tree.value + getTreeSum(tree.left) + getTreeSum(tree.right);\n}\n")))}m.isMDXComponent=!0}}]);