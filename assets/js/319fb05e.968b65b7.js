"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[351],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),g=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=g(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=g(t),p=i,m=u["".concat(l,".").concat(p)]||u[p]||d[p]||o;return t?r.createElement(m,s(s({ref:n},c),{},{components:t})):r.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=p;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[u]="string"==typeof e?e:i,s[1]=a;for(var g=2;g<o;g++)s[g]=t[g];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9054:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>g});var r=t(7462),i=(t(7294),t(3905));const o={},s="Longest Palindromic Substring",a={unversionedId:"easy/longest_palindromic_substring",id:"easy/longest_palindromic_substring",title:"Longest Palindromic Substring",description:"Write a function that, given a string, returns its longest palindromic substring.",source:"@site/docs/easy/longest_palindromic_substring.md",sourceDirName:"easy",slug:"/easy/longest_palindromic_substring",permalink:"/docs/easy/longest_palindromic_substring",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/easy/longest_palindromic_substring.md",tags:[],version:"current",lastUpdatedBy:"sieuhuflit",lastUpdatedAt:1692725116,formattedLastUpdatedAt:"Aug 22, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Generate Document",permalink:"/docs/easy/generate_document"},next:{title:"Node Depths",permalink:"/docs/easy/node_depths"}},l={},g=[],c={toc:g},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"longest-palindromic-substring"},"Longest Palindromic Substring"),(0,i.kt)("admonition",{title:"Longest Palindromic Substring",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Write a function that, given a string, returns its longest palindromic substring."),(0,i.kt)("p",{parentName:"admonition"},"A palindrome is defined as a string that's written the same forward and backward. Note that single-character strings are palindromes."),(0,i.kt)("p",{parentName:"admonition"},"You can assume that there will only be one longest palindromic substring."),(0,i.kt)("p",{parentName:"admonition"},'Sample Input\nstring = "abaxyzzyxf"\nSample Output\n"xyzzyx"')),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},'// O(n^3) time | O(n) space\nfunction longestPalindromicSubstring(string) {\n  let longest = "";\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      const substring = string.slice(i, j + 1);\n      if (substring.length > longest.length && isPalindrome(substring)) {\n        longest = substring;\n      }\n    }\n  }\n  return longest;\n}\n\nfunction isPalindrome(string) {\n  let leftIndex = 0;\n  let rightIndex = string.length - 1;\n  while (leftIndex < rightIndex) {\n    if (string[leftIndex] !== string[rightIndex]) return false;\n    leftIndex++;\n    rightIndex--;\n  }\n  return true;\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 2"',title:'"Solution','2"':!0},"// O(n^2)\nfunction longestPalindromicSubstring(string) {\n  let currentLongest = [0, 1];\n  for (let i = 1; i < string.length; i++) {\n    const odd = getLongestPalindromeFrom(string, i - 1, i + 1);\n    const even = getLongestPalindromeFrom(string, i - 1, i);\n    const longest = odd[1] - odd[0] > even[1] - even[0] ? odd : even;\n    currentLongest =\n      currentLongest[1] - currentLongest[0] > longest[1] - longest[0]\n        ? currentLongest\n        : longest;\n  }\n  return string.slice(currentLongest[0], currentLongest[1]);\n}\n\nfunction getLongestPalindromeFrom(string, leftIndex, rightIndex) {\n  while (leftIndex >= 0 && rightIndex <= string.length) {\n    if (string[leftIndex] !== string[rightIndex]) break;\n    leftIndex++;\n    rightIndex--;\n  }\n  return [leftIndex + 1, rightIndex];\n}\n")))}d.isMDXComponent=!0}}]);