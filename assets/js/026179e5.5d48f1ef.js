"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7719],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),h=a,u=c["".concat(l,".").concat(h)]||c[h]||m[h]||r;return n?o.createElement(u,i(i({ref:t},p),{},{components:n})):o.createElement(u,i({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2531:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var o=n(7462),a=(n(7294),n(3905));const r={},i="Template method",s={unversionedId:"design_patterns/behavior_design_patterns/template_method",id:"design_patterns/behavior_design_patterns/template_method",title:"Template method",description:"In software development, you may have scenarios where you need to define the skeleton of an algorithm in a base class, but allow certain steps of the algorithm to be implemented by subclasses. Without the Template Method Pattern, you might create a monolithic method with conditional statements that determine the flow of the algorithm. This can lead to code duplication, reduced reusability, and difficulty in maintaining and extending the algorithm.",source:"@site/docs/design_patterns/behavior_design_patterns/template_method.md",sourceDirName:"design_patterns/behavior_design_patterns",slug:"/design_patterns/behavior_design_patterns/template_method",permalink:"/docs/design_patterns/behavior_design_patterns/template_method",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/design_patterns/behavior_design_patterns/template_method.md",tags:[],version:"current",lastUpdatedBy:"Sieu Thai",lastUpdatedAt:1696998432,formattedLastUpdatedAt:"Oct 11, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Strategy \ud83c\udfaf",permalink:"/docs/design_patterns/behavior_design_patterns/strategy"},next:{title:"Visitor",permalink:"/docs/design_patterns/behavior_design_patterns/visitor"}},l={},d=[{value:"Solution",id:"solution",level:2},{value:"When to Use",id:"when-to-use",level:2}],p={toc:d},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"template-method"},"Template method"),(0,a.kt)("h1",{id:"problem"},"Problem"),(0,a.kt)("admonition",{title:"The Template Method Pattern Problem:",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"In software development, you may have scenarios where you need to define the skeleton of an algorithm in a base class, but allow certain steps of the algorithm to be implemented by subclasses. Without the Template Method Pattern, you might create a monolithic method with conditional statements that determine the flow of the algorithm. This can lead to code duplication, reduced reusability, and difficulty in maintaining and extending the algorithm."),(0,a.kt)("p",{parentName:"admonition"},"For example, consider a process for making different types of beverages (e.g., coffee, tea). Without the Template Method Pattern, you might have a single method with conditionals to handle the specific steps for each beverage type."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Problem: Implementing beverage preparation without the Template Method Pattern\n\nclass Coffee {\n  prepare() {\n    this.boilWater();\n    this.brewCoffeeGrounds();\n    this.pourInCup();\n    this.addSugarAndMilk();\n  }\n\n  boilWater() {\n    console.log("Boiling water.");\n  }\n\n  brewCoffeeGrounds() {\n    console.log("Brewing coffee grounds.");\n  }\n\n  pourInCup() {\n    console.log("Pouring coffee into cup.");\n  }\n\n  addSugarAndMilk() {\n    console.log("Adding sugar and milk.");\n  }\n}\n\nclass Tea {\n  prepare() {\n    this.boilWater();\n    this.steepTeaBag();\n    this.pourInCup();\n    this.addLemon();\n  }\n\n  boilWater() {\n    console.log("Boiling water.");\n  }\n\n  steepTeaBag() {\n    console.log("Steeping the tea bag.");\n  }\n\n  pourInCup() {\n    console.log("Pouring tea into cup.");\n  }\n\n  addLemon() {\n    console.log("Adding lemon.");\n  }\n}\n\n// Client code\nconst coffee = new Coffee();\nconst tea = new Tea();\n\nconsole.log("Making coffee:");\ncoffee.prepare();\n\nconsole.log("\\nMaking tea:");\ntea.prepare();\n')),(0,a.kt)("p",{parentName:"admonition"},"In this code, each beverage class (Coffee and Tea) has its own prepare method with duplicated steps for boiling water and pouring in a cup.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("admonition",{title:"The Template Method Pattern Solution:",type:"success"},(0,a.kt)("p",{parentName:"admonition"},"The Template Method Pattern defines the structure of an algorithm in a base class (template method) but allows subclasses to override specific steps of the algorithm. It promotes code reuse, provides a consistent structure for algorithms, and ensures that certain steps are enforced while allowing flexibility for customization."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Solution: Implementing beverage preparation using the Template Method Pattern\n\nclass Beverage {\n  prepare() {\n    this.boilWater();\n    this.brew();\n    this.pourInCup();\n    this.addCondiments();\n  }\n\n  boilWater() {\n    console.log("Boiling water.");\n  }\n\n  pourInCup() {\n    console.log("Pouring into cup.");\n  }\n\n  // Methods to be overridden by subclasses\n  brew() {}\n\n  addCondiments() {}\n}\n\nclass Coffee extends Beverage {\n  brew() {\n    console.log("Dripping coffee through filter.");\n  }\n\n  addCondiments() {\n    console.log("Adding sugar and milk.");\n  }\n}\n\nclass Tea extends Beverage {\n  brew() {\n    console.log("Steeping the tea.");\n  }\n\n  addCondiments() {\n    console.log("Adding lemon.");\n  }\n}\n\n// Client code using the Template Method Pattern\nconst coffee = new Coffee();\nconst tea = new Tea();\n\nconsole.log("Making coffee:");\ncoffee.prepare();\n\nconsole.log("\\nMaking tea:");\ntea.prepare();\n')),(0,a.kt)("p",{parentName:"admonition"},"In this code with the Template Method Pattern:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"We define a Beverage base class with a template method prepare() that defines the algorithm's structure. It calls common methods like boilWater(), pourInCup(), brew(), and addCondiments()."),(0,a.kt)("li",{parentName:"ul"},"Subclasses (Coffee and Tea) override the brew() and addCondiments() methods to customize their behavior."),(0,a.kt)("li",{parentName:"ul"},"The template method ensures that common steps are executed in a specific order, promoting code reuse and consistency.")),(0,a.kt)("p",{parentName:"admonition"},"The Template Method Pattern is useful when you have a family of algorithms with a common structure but varying steps. It allows you to centralize the common algorithmic logic in a base class while allowing subclasses to customize specific steps.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"when-to-use"},"When to Use"),(0,a.kt)("p",null,"When to Use the Template Method Pattern:\nYou should consider using the Template Method Pattern in the following situations:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"When you want to define the structure of an algorithm but allow certain steps to be customized by subclasses."),(0,a.kt)("li",{parentName:"ol"},"When you want to avoid code duplication by centralizing common algorithmic logic in a base class."),(0,a.kt)("li",{parentName:"ol"},"When you need to ensure that certain steps are followed in a specific order within an algorithm."),(0,a.kt)("li",{parentName:"ol"},"When you want to provide a consistent interface for a family of algorithms while allowing individual steps to vary.")))}m.isMDXComponent=!0}}]);