"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9510],{8671:e=>{e.exports=JSON.parse('{"label":"Binary Trees","permalink":"/docs/tags/binary-trees","allTagsPath":"/docs/tags","count":10,"items":[{"id":"medium/binary_tree_diameter","title":"Binary Tree Diameter","description":"Write a function that takes in a Binary Tree and returns its diameter. The diameter of a binary tree is defined as the length of its longest path, even if that path doesn\'t pass through the root of the tree.","permalink":"/docs/medium/binary_tree_diameter"},{"id":"easy/branch_sum","title":"Branch sum","description":"Write a function that takes in a Binary Tree and returns a list of its branch sums ordered from leftmost branch sum to rightmost branch sum.","permalink":"/docs/easy/branch_sum"},{"id":"easy/evaluate_expression_tree","title":"Evaluate Expression Tree","description":"You\'re given a binary expression tree. Write a function to evaluate this tree mathematically and return a single resulting integer.","permalink":"/docs/easy/evaluate_expression_tree"},{"id":"medium/find_successtor","title":"Find Successor","description":"Write a function that takes in a Binary Tree (where nodes have an additional pointer to their parent node) as well as a node contained in that tree and returns the given node\'s successor.","permalink":"/docs/medium/find_successtor"},{"id":"medium/height_balanced_binary_tree","title":"Height Balanced Binary Tree","description":"You\'re given the root node of a Binary Tree. Write a function that returns true if this Binary Tree is height balanced and false if it isn\'t.","permalink":"/docs/medium/height_balanced_binary_tree"},{"id":"medium/evaluate_expression_tree","title":"Invert Binary Tree","description":"Write a function that takes in a Binary Tree and inverts it. In other words, the function should swap every left node in the tree for its corresponding right node.","permalink":"/docs/medium/evaluate_expression_tree"},{"id":"medium/merge_binary_tree","title":"Merge Binary Trees","description":"Given two binary trees, merge them and return the resulting tree. If two nodes overlap during the merger then sum the values, otherwise use the existing node.","permalink":"/docs/medium/merge_binary_tree"},{"id":"easy/node_depths","title":"Node Depths","description":"The distance between a node in a Binary Tree and the tree\'s root is called the node\'s depth.","permalink":"/docs/easy/node_depths"},{"id":"medium/split_binary_tree","title":"Split Binary Tree","description":"Write a function that takes in a Binary Tree with at least one node and checks if that Binary Tree can be split into two Binary Trees of equal sum by removing a single edge. If this split is possible, return the new sum of each Binary Tree, otherwise return 0. Note that you do not need to return the edge that was removed.","permalink":"/docs/medium/split_binary_tree"},{"id":"medium/symetrical_tree","title":"Symmetrical Tree","description":"Write a function that takes in a Binary Tree and returns if that tree is symmetrical. A tree is symmetrical if the left and right subtrees are mirror images of each other.","permalink":"/docs/medium/symetrical_tree"}]}')}}]);