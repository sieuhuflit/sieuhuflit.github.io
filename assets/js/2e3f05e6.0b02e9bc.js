"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9631],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=d(n),f=a,h=c["".concat(l,".").concat(f)]||c[f]||p[f]||i;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:a,s[1]=o;for(var d=2;d<i;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7207:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const i={tags:["Binary Search Trees"]},s="Find Kth Largest Value In BST",o={unversionedId:"easy/find_kth_largest_value_in_bst",id:"easy/find_kth_largest_value_in_bst",title:"Find Kth Largest Value In BST",description:"Write a function that takes in a Binary Search Tree (BST) and a positive integer k and returns the kth largest integer contained in the BST.",source:"@site/docs/easy/find_kth_largest_value_in_bst.md",sourceDirName:"easy",slug:"/easy/find_kth_largest_value_in_bst",permalink:"/docs/easy/find_kth_largest_value_in_bst",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/easy/find_kth_largest_value_in_bst.md",tags:[{label:"Binary Search Trees",permalink:"/docs/tags/binary-search-trees"}],version:"current",lastUpdatedBy:"sieuhuflit",lastUpdatedAt:1693639106,formattedLastUpdatedAt:"Sep 2, 2023",frontMatter:{tags:["Binary Search Trees"]},sidebar:"tutorialSidebar",previous:{title:"Find Closest Value In BST",permalink:"/docs/easy/find_closest_value_in_bst"},next:{title:"Find Three Largest Numbers",permalink:"/docs/easy/find_three_largest_numbers"}},l={},d=[],u={toc:d},c="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"find-kth-largest-value-in-bst"},"Find Kth Largest Value In BST"),(0,a.kt)("admonition",{title:"Find Kth Largest Value In BST",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Write a function that takes in a Binary Search Tree (BST) and a positive integer k and returns the kth largest integer contained in the BST."),(0,a.kt)("p",{parentName:"admonition"},"You can assume that there will only be integer values in the BST and that k is less than or equal to the number of nodes in the tree."),(0,a.kt)("p",{parentName:"admonition"},"Also, for the purpose of this question, duplicate integers will be treated as distinct values. In other words, the second largest value in a BST containing values {5, 7, 7} will be 7\u2014not 5."),(0,a.kt)("p",{parentName:"admonition"},"Each BST node has an integer value, a left child node, and a right child node. A node is said to be a valid BST node if and only if it satisfies the BST property: its value is strictly greater than the values of every node to its left; its value is less than or equal to the values of every node to its right; and its children nodes are either valid BST nodes themselves or None / null."),(0,a.kt)("p",{parentName:"admonition"},"Sample Input"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"tree =   15\n       /     \\\n      5      20\n    /   \\   /   \\\n   2     5 17   22\n /   \\         \n1     3       \nk = 3\n")),(0,a.kt)("p",{parentName:"admonition"},"Sample Output"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"17\n"))),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"// This is an input class. Do not edit.\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// O(n) time | O(n) space - where n is the number of nodes in the tree\nfunction findKthLargestValueInBst(tree, k) {\n  const sortedNodeValues = [];\n  inOrderTraverse(tree, sortedNodeValues);\n  return sortedNodeValues[sortedNodeValues.length - k];\n}\n\nfunction inOrderTraverse(node, sortedNodeValues) {\n  if (node === null) return;\n\n  inOrderTraverse(node.left, sortedNodeValues);\n  sortedNodeValues.push(node.value);\n  inOrderTraverse(node.right, sortedNodeValues);\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 2"',title:'"Solution','2"':!0},"// This is an input class. Do not edit.\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nclass TreeInfo {\n  constructor(numberOfNodesVisited, latestVisitedNodeValue) {\n    this.numberOfNodesVisited = numberOfNodesVisited;\n    this.latestVisitedNodeValue = latestVisitedNodeValue;\n  }\n}\n\n// O(h + k) time | O(h) space - where h is the height of the tree and k is the input parameter\nfunction findKthLargestValueInBst(tree, k) {\n  const treeInfo = new TreeInfo(0, -1);\n  reverseInOrderTraverse(tree, k, treeInfo);\n  return treeInfo.latestVisitedNodeValue;\n}\n\nfunction reverseInOrderTraverse(node, k, treeInfo) {\n  if (node === null || treeInfo.numberOfNodesVisited >= k) return;\n\n  reverseInOrderTraverse(node.right, k, treeInfo);\n  if (treeInfo.numberOfNodesVisited < k) {\n    treeInfo.numberOfNodesVisited++;\n    treeInfo.latestVisitedNodeValue = node.value;\n    reverseInOrderTraverse(node.left, k, treeInfo);\n  }\n}\n")))}p.isMDXComponent=!0}}]);