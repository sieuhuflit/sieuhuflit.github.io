"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7482],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>p});var r=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function a(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=r.createContext({}),g=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=g(t.components);return r.createElement(l.Provider,{value:e},t.children)},c="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,l=t.parentName,u=a(t,["components","mdxType","originalType","parentName"]),c=g(n),m=i,p=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(p,s(s({ref:e},u),{},{components:n})):r.createElement(p,s({ref:e},u))}));function p(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,s=new Array(o);s[0]=m;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=t,a[c]="string"==typeof t?t:i,s[1]=a;for(var g=2;g<o;g++)s[g]=n[g];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7262:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>g});var r=n(7462),i=(n(7294),n(3905));const o={},s="Longest Palindromic Substring",a={unversionedId:"medium/longest_palindromic_substring",id:"medium/longest_palindromic_substring",title:"Longest Palindromic Substring",description:"Write a function that, given a string, returns its longest palindromic substring.",source:"@site/docs/medium/longest_palindromic_substring.md",sourceDirName:"medium",slug:"/medium/longest_palindromic_substring",permalink:"/docs/medium/longest_palindromic_substring",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/medium/longest_palindromic_substring.md",tags:[],version:"current",lastUpdatedBy:"sieuhuflit",lastUpdatedAt:1693756320,formattedLastUpdatedAt:"Sep 3, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Levenshtein Distance",permalink:"/docs/medium/levenshtein_distance"},next:{title:"Longest Peak",permalink:"/docs/medium/longest_peak"}},l={},g=[],u={toc:g},c="wrapper";function d(t){let{components:e,...n}=t;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"longest-palindromic-substring"},"Longest Palindromic Substring"),(0,i.kt)("admonition",{title:"Longest Palindromic Substring",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Write a function that, given a string, returns its longest palindromic substring."),(0,i.kt)("p",{parentName:"admonition"},"A palindrome is defined as a string that's written the same forward and backward. Note that single-character strings are palindromes."),(0,i.kt)("p",{parentName:"admonition"},"You can assume that there will only be one longest palindromic substring."),(0,i.kt)("p",{parentName:"admonition"},"Sample Input"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},'string = "abaxyzzyxf"\n')),(0,i.kt)("p",{parentName:"admonition"},"Sample Output"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},'"xyzzyx"\n'))),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"// O(n^3) time | O(n) space\nfunction longestPalindromicSubstring(string) {\n  let longest = '';\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      const substring = string.slice(i, j + 1);\n      if (substring.length > longest.length && isPalindrome(substring)) {\n        longest = substring;\n      }\n    }\n  }\n  return longest;\n}\n\nfunction isPalindrome(string) {\n  let leftIdx = 0;\n  let rightIdx = string.length - 1;\n  while (leftIdx < rightIdx) {\n    if (string[leftIdx] !== string[rightIdx]) return false;\n    leftIdx++;\n    rightIdx--;\n  }\n  return true;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 2"',title:'"Solution','2"':!0},"// O(n^2) time | O(n) space\nfunction longestPalindromicSubstring(string) {\n  let currentLongest = [0, 1];\n  for (let i = 1; i < string.length; i++) {\n    const odd = getLongestPalindromeFrom(string, i - 1, i + 1);\n    const even = getLongestPalindromeFrom(string, i - 1, i);\n    const longest = odd[1] - odd[0] > even[1] - even[0] ? odd : even;\n    currentLongest =\n      currentLongest[1] - currentLongest[0] > longest[1] - longest[0] ? currentLongest : longest;\n  }\n  return string.slice(currentLongest[0], currentLongest[1]);\n}\n\nfunction getLongestPalindromeFrom(string, leftIdx, rightIdx) {\n  while (leftIdx >= 0 && rightIdx < string.length) {\n    if (string[leftIdx] !== string[rightIdx]) break;\n    leftIdx--;\n    rightIdx++;\n  }\n  return [leftIdx + 1, rightIdx];\n}\n")))}d.isMDXComponent=!0}}]);