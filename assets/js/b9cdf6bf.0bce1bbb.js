"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[162],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>f});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var u=r.createContext({}),m=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},l=function(n){var e=m(n.components);return r.createElement(u.Provider,{value:e},n.children)},c="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,u=n.parentName,l=a(n,["components","mdxType","originalType","parentName"]),c=m(t),d=i,f=c["".concat(u,".").concat(d)]||c[d]||p[d]||o;return t?r.createElement(f,s(s({ref:e},l),{},{components:t})):r.createElement(f,s({ref:e},l))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,s=new Array(o);s[0]=d;var a={};for(var u in e)hasOwnProperty.call(e,u)&&(a[u]=e[u]);a.originalType=n,a[c]="string"==typeof n?n:i,s[1]=a;for(var m=2;m<o;m++)s[m]=t[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},157:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>m});var r=t(7462),i=(t(7294),t(3905));const o={tags:["Arrays"]},s="Missing Numbers",a={unversionedId:"medium/missing_number",id:"medium/missing_number",title:"Missing Numbers",description:"You're given an unordered list of unique integers nums in the range [1, n], where n represents the length of nums + 2. This means that two numbers in this range are missing from the list.",source:"@site/docs/medium/missing_number.md",sourceDirName:"medium",slug:"/medium/missing_number",permalink:"/docs/medium/missing_number",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/medium/missing_number.md",tags:[{label:"Arrays",permalink:"/docs/tags/arrays"}],version:"current",lastUpdatedBy:"Sieu Thai",lastUpdatedAt:1696996334,formattedLastUpdatedAt:"Oct 11, 2023",frontMatter:{tags:["Arrays"]},sidebar:"tutorialSidebar",previous:{title:"Minimum Characters For Words",permalink:"/docs/medium/minimum_characters_for_words"},next:{title:"Monotonic Array",permalink:"/docs/medium/monotonic_array"}},u={},m=[],l={toc:m},c="wrapper";function p(n){let{components:e,...t}=n;return(0,i.kt)(c,(0,r.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"missing-numbers"},"Missing Numbers"),(0,i.kt)("admonition",{title:"Missing Numbers",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You're given an unordered list of unique integers nums in the range ","[1, n]",", where n represents the length of nums + 2. This means that two numbers in this range are missing from the list."),(0,i.kt)("p",{parentName:"admonition"},"Write a function that takes in this list and returns a new list with the two missing numbers, sorted numerically."),(0,i.kt)("p",{parentName:"admonition"},"Sample Input"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"nums = [1, 4, 3]\n")),(0,i.kt)("p",{parentName:"admonition"},"Sample Output"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"[2, 5]  // n is 5, meaning the completed list should be [1, 2, 3, 4, 5]\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"// O(n) time | O(n) space - where n is the length of the input array\nfunction missingNumbers(nums) {\n  const includedNums = new Set(nums);\n\n  const solution = [];\n  for (let num = 1; num < nums.length + 3; num++) {\n    if (!includedNums.has(num)) {\n      solution.push(num);\n    }\n  }\n\n  return solution;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 2"',title:'"Solution','2"':!0},"// O(n) time | O(1) space - where n is the length of the input array\nfunction missingNumbers(nums) {\n  let total = sum(arrayFromAToB(1, nums.length + 3));\n\n  for (const num of nums) {\n    total -= num;\n  }\n\n  const averageMissingValue = Math.floor(total / 2);\n  let foundFirstHalf = 0;\n  let foundSecondHalf = 0;\n  for (const num of nums) {\n    if (num <= averageMissingValue) {\n      foundFirstHalf += num;\n    } else {\n      foundSecondHalf += num;\n    }\n  }\n\n  const expectedFirstHalf = sum(arrayFromAToB(1, averageMissingValue + 1));\n  const expectedSecondHalf = sum(arrayFromAToB(averageMissingValue + 1, nums.length + 3));\n\n  return [expectedFirstHalf - foundFirstHalf, expectedSecondHalf - foundSecondHalf];\n}\n\nconst arrayFromAToB = (a, b) => {\n  const array = [];\n  for (let num = a; num < b; num++) {\n    array.push(num);\n  }\n  return array;\n};\n\nconst sum = array => array.reduce((a, b) => a + b);\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 3"',title:'"Solution','3"':!0},"// O(n) time | O(1) space - where n is the length of the input array\nfunction missingNumbers(nums) {\n  let solutionXOR = 0;\n  for (let i = 0; i < nums.length + 3; i++) {\n    solutionXOR ^= i;\n    if (i < nums.length) {\n      solutionXOR ^= nums[i];\n    }\n  }\n\n  const solution = [0, 0];\n  const setBit = solutionXOR & -solutionXOR;\n  for (let i = 0; i < nums.length + 3; i++) {\n    if ((i & setBit) === 0) {\n      solution[0] ^= i;\n    } else {\n      solution[1] ^= i;\n    }\n\n    if (i < nums.length) {\n      if ((nums[i] & setBit) === 0) {\n        solution[0] ^= nums[i];\n      } else {\n        solution[1] ^= nums[i];\n      }\n    }\n  }\n\n  solution.sort((a, b) => a - b);\n  return solution;\n}\n")))}p.isMDXComponent=!0}}]);