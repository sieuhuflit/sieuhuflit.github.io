"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8912],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=o.createContext({}),s=function(e){var n=o.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(u.Provider,{value:n},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},l=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),f=s(t),l=r,d=f["".concat(u,".").concat(l)]||f[l]||p[l]||a;return t?o.createElement(d,i(i({ref:n},c),{},{components:t})):o.createElement(d,i({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=l;var m={};for(var u in n)hasOwnProperty.call(n,u)&&(m[u]=n[u]);m.originalType=e,m[f]="string"==typeof e?e:r,i[1]=m;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}l.displayName="MDXCreateElement"},1073:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>m,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const a={},i="Min Number Of Coins For Change",m={unversionedId:"medium/min_number_of_coins_for_change",id:"medium/min_number_of_coins_for_change",title:"Min Number Of Coins For Change",description:"Given an array of positive integers representing coin denominations and a single non-negative integer n representing a target amount of money, write a function that returns the smallest number of coins needed to make change for (to sum up to) that target amount using the given coin denominations.",source:"@site/docs/medium/min_number_of_coins_for_change.md",sourceDirName:"medium",slug:"/medium/min_number_of_coins_for_change",permalink:"/docs/medium/min_number_of_coins_for_change",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/medium/min_number_of_coins_for_change.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Max Subset Sum No Adjacent",permalink:"/docs/medium/max_subset_sum_no_adjadent"},next:{title:"Number Of Ways To Make Change",permalink:"/docs/medium/number_of_ways_to_make_change"}},u={},s=[],c={toc:s},f="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(f,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"min-number-of-coins-for-change"},"Min Number Of Coins For Change"),(0,r.kt)("admonition",{title:"Min Number Of Coins For Change",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Given an array of positive integers representing coin denominations and a single non-negative integer n representing a target amount of money, write a function that returns the smallest number of coins needed to make change for (to sum up to) that target amount using the given coin denominations."),(0,r.kt)("p",{parentName:"admonition"},"Note that you have access to an unlimited amount of coins. In other words, if the denominations are ","[1, 5, 10]",", you have access to an unlimited amount of 1s, 5s, and 10s."),(0,r.kt)("p",{parentName:"admonition"},"If it's impossible to make change for the target amount, return -1."),(0,r.kt)("p",{parentName:"admonition"},"Sample Input"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"n = 7\ndenoms = [1, 5, 10]\n")),(0,r.kt)("p",{parentName:"admonition"},"Sample Output"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"3 // 2x1 + 1x5\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution"',title:'"Solution"'},"// O(nd) time | O(n) space\nfunction minNumberOfCoinsForChange(n, denoms) {\n  const numOfCoins = new Array(n + 1).fill(Infinity);\n  numOfCoins[0] = 0;\n  for (let denom of denoms) {\n    for (let amount = 0 ; amount < numOfCoins.length ; amount++) {\n      if (denom <= amount) {\n        numOfCoins[amount] = Math.min(numOfCoins[amount], numOfCoins[amount - denom] + 1);\n      }\n    }\n  }\n  return numOfCoins[n] !== Infinity ? numOfCoins[n] : -1;\n}\n\n")))}p.isMDXComponent=!0}}]);