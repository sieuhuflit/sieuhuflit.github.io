"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1784],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>f});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=r.createContext({}),l=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},m=function(t){var e=l(t.components);return r.createElement(c.Provider,{value:e},t.children)},u="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},h=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),u=l(n),h=a,f=u["".concat(c,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(f,s(s({ref:e},m),{},{components:n})):r.createElement(f,s({ref:e},m))}));function f(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[u]="string"==typeof t?t:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4738:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={},s="Common Characters",i={unversionedId:"easy/common_characters",id:"easy/common_characters",title:"Common Characters",description:"Write a function that takes in a non-empty list of non-empty strings and returns a list of characters that are common to all strings in the list, ignoring multiplicity.",source:"@site/docs/easy/common_characters.md",sourceDirName:"easy",slug:"/easy/common_characters",permalink:"/docs/easy/common_characters",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/easy/common_characters.md",tags:[],version:"current",lastUpdatedBy:"Sieu Thai",lastUpdatedAt:1696998432,formattedLastUpdatedAt:"Oct 11, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Class Photos",permalink:"/docs/easy/class_photos"},next:{title:"Depth-first Search",permalink:"/docs/easy/depth_first_search"}},c={},l=[],m={toc:l},u="wrapper";function p(t){let{components:e,...n}=t;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"common-characters"},"Common Characters"),(0,a.kt)("admonition",{title:"Common Characters",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Write a function that takes in a non-empty list of non-empty strings and returns a list of characters that are common to all strings in the list, ignoring multiplicity."),(0,a.kt)("p",{parentName:"admonition"},"Note that the strings are not guaranteed to only contain alphanumeric characters. The list you return can be in any order."),(0,a.kt)("p",{parentName:"admonition"},"Sample Input"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},'strings = ["abc", "bcd", "cbaccd"]\n')),(0,a.kt)("p",{parentName:"admonition"},"Sample Output"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},'["b", "c"] // The characters could be ordered differently.\n'))),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"// O(n * m) time | O(c) space - where n is the number of strings, m is the\n// length of the longest string, and c is the number of unique characters across\n// all strings\nfunction commonCharacters(strings) {\n  const characterCounts = {};\n  for (const string of strings) {\n    const uniqueStringCharacters = new Set(string);\n    for (const character of uniqueStringCharacters) {\n      if (!(character in characterCounts)) {\n        characterCounts[character] = 0;\n      }\n      characterCounts[character]++;\n    }\n  }\n\n  const finalCharacters = [];\n  for (const [character, count] of Object.entries(characterCounts)) {\n    if (count === strings.length) {\n      finalCharacters.push(character);\n    }\n  }\n\n  return finalCharacters;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 2"',title:'"Solution','2"':!0},"// O(n * m) time | O(m) space - where n is the number of strings, and m is the\n// length of the longest string\nfunction commonCharacters(strings) {\n  const smallestString = getSmallestString(strings);\n  const potentialCommonCharacters = new Set(smallestString);\n\n  for (const string of strings) {\n    removeNonexistentCharacters(string, potentialCommonCharacters);\n  }\n\n  return Array.from(potentialCommonCharacters);\n}\n\nfunction getSmallestString(strings) {\n  let smallestString = strings[0];\n  for (const string of strings) {\n    if (string.length < smallestString.length) {\n      smallestString = string;\n    }\n  }\n\n  return smallestString;\n}\n\nfunction removeNonexistentCharacters(string, potentialCommonCharacters) {\n  const uniqueStringCharacters = new Set(string);\n\n  for (const character of Array.from(potentialCommonCharacters)) {\n    if (!uniqueStringCharacters.has(character)) {\n      potentialCommonCharacters.delete(character);\n    }\n  }\n}\n\n")))}p.isMDXComponent=!0}}]);