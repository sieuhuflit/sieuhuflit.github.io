"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[840],{3905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>h});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},m=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},d="mdxType",l={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=u(t),p=a,h=d["".concat(s,".").concat(p)]||d[p]||l[p]||c;return t?n.createElement(h,o(o({ref:r},m),{},{components:t})):n.createElement(h,o({ref:r},m))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var c=t.length,o=new Array(c);o[0]=p;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<c;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1680:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var n=t(7462),a=(t(7294),t(3905));const c={},o="Minimum Characters For Words",i={unversionedId:"medium/minimum_characters_for_words",id:"medium/minimum_characters_for_words",title:"Minimum Characters For Words",description:"Write a function that takes in an array of words and returns the smallest array of characters needed to form all of the words. The characters don't need to be in any particular order.",source:"@site/docs/medium/minimum_characters_for_words.md",sourceDirName:"medium",slug:"/medium/minimum_characters_for_words",permalink:"/docs/medium/minimum_characters_for_words",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/medium/minimum_characters_for_words.md",tags:[],version:"current",lastUpdatedBy:"sieuhuflit",lastUpdatedAt:1693755249,formattedLastUpdatedAt:"Sep 3, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Min Number Of Coins For Change",permalink:"/docs/medium/min_number_of_coins_for_change"},next:{title:"Missing Numbers",permalink:"/docs/medium/missing_number"}},s={},u=[],m={toc:u},d="wrapper";function l(e){let{components:r,...t}=e;return(0,a.kt)(d,(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"minimum-characters-for-words"},"Minimum Characters For Words"),(0,a.kt)("admonition",{title:"Minimum Characters For Words",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Write a function that takes in an array of words and returns the smallest array of characters needed to form all of the words. The characters don't need to be in any particular order."),(0,a.kt)("p",{parentName:"admonition"},"For example, the characters ",'["y", "r", "o", "u"]'," are needed to form the words ",'["your", "you", "or", "yo"]',"."),(0,a.kt)("p",{parentName:"admonition"},"Note: the input words won't contain any spaces; however, they might contain punctuation and/or special characters."),(0,a.kt)("p",{parentName:"admonition"},"Sample Input"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},'words = ["this", "that", "did", "deed", "them!", "a"]\n')),(0,a.kt)("p",{parentName:"admonition"},"Sample Output"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},'["t", "t", "h", "i", "s", "a", "d", "d", "e", "e", "m", "!"]\n// The characters could be ordered differently.\n'))),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"// O(n * l) time | O(c) space - where n is the number of words,\n// l is the length of the longest word, and c is the number of\n// unique characters across all words\n// See notes under video explanation for details about the space complexity.\nfunction minimumCharactersForWords(words) {\n  const maximumCharacterFrequencies = {};\n\n  for (const word of words) {\n    const characterFrequencies = countCharacterFrequencies(word);\n    updateMaximumFrequencies(characterFrequencies, maximumCharacterFrequencies);\n  }\n\n  return makeArrayFromCharacterFrequencies(maximumCharacterFrequencies);\n}\n\nfunction countCharacterFrequencies(string) {\n  const characterFrequencies = {};\n\n  for (const character of string) {\n    if (!(character in characterFrequencies)) {\n      characterFrequencies[character] = 0;\n    }\n\n    characterFrequencies[character] += 1;\n  }\n\n  return characterFrequencies;\n}\n\nfunction updateMaximumFrequencies(frequencies, maximumFrequencies) {\n  for (const character in frequencies) {\n    const frequency = frequencies[character];\n\n    if (character in maximumFrequencies) {\n      maximumFrequencies[character] = Math.max(frequency, maximumFrequencies[character]);\n    } else {\n      maximumFrequencies[character] = frequency;\n    }\n  }\n}\n\nfunction makeArrayFromCharacterFrequencies(characterFrequencies) {\n  const characters = [];\n\n  for (const character in characterFrequencies) {\n    const frequency = characterFrequencies[character];\n\n    for (let idx = 0; idx < frequency; idx++) {\n      characters.push(character);\n    }\n  }\n\n  return characters;\n}\n")))}l.isMDXComponent=!0}}]);