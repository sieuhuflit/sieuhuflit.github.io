"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6659],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,v=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(v,o(o({ref:t},c),{},{components:n})):r.createElement(v,o({ref:t},c))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9846:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={tags:["Arrays"]},o="Merge Overlapping Intervals",l={unversionedId:"medium/merge_overlapping_intervals",id:"medium/merge_overlapping_intervals",title:"Merge Overlapping Intervals",description:"Write a function that takes in a non-empty array of arbitrary intervals, merges any overlapping intervals, and returns the new intervals in no particular order.",source:"@site/docs/medium/merge_overlapping_intervals.md",sourceDirName:"medium",slug:"/medium/merge_overlapping_intervals",permalink:"/docs/medium/merge_overlapping_intervals",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/medium/merge_overlapping_intervals.md",tags:[{label:"Arrays",permalink:"/docs/tags/arrays"}],version:"current",lastUpdatedBy:"sieuhuflit",lastUpdatedAt:1693639106,formattedLastUpdatedAt:"Sep 2, 2023",frontMatter:{tags:["Arrays"]},sidebar:"tutorialSidebar",previous:{title:"Max Subset Sum No Adjacent",permalink:"/docs/medium/max_subset_sum_no_adjadent"},next:{title:"Min Number Of Coins For Change",permalink:"/docs/medium/min_number_of_coins_for_change"}},p={},s=[],c={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"merge-overlapping-intervals"},"Merge Overlapping Intervals"),(0,a.kt)("admonition",{title:"Merge Overlapping Intervals",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Write a function that takes in a non-empty array of arbitrary intervals, merges any overlapping intervals, and returns the new intervals in no particular order."),(0,a.kt)("p",{parentName:"admonition"},"Each interval interval is an array of two integers, with interval","[0]"," as the start of the interval and interval","[1]"," as the end of the interval."),(0,a.kt)("p",{parentName:"admonition"},"Note that back-to-back intervals aren't considered to be overlapping. For example, ","[1, 5]"," and ","[6, 7]"," aren't overlapping; however, ","[1, 6]"," and ","[6, 7]"," are indeed overlapping."),(0,a.kt)("p",{parentName:"admonition"},"Also note that the start of any particular interval will always be less than or equal to the end of that interval."),(0,a.kt)("p",{parentName:"admonition"},"Sample Input"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"intervals = [[1, 2], [3, 5], [4, 7], [6, 8], [9, 10]]\n")),(0,a.kt)("p",{parentName:"admonition"},"Sample Output"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"[[1, 2], [3, 8], [9, 10]]\n// Merge the intervals [3, 5], [4, 7], and [6, 8].\n// The intervals could be ordered differently.\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution"',title:'"Solution"'},"// O(nlog(n)) time | O(n) space - where n is the length of the input array\nfunction mergeOverlappingIntervals(intervals) {\n  const sortedIntervals = intervals.sort((a, b) => a[0] - b[0]);\n\n  const mergedIntervals = [];\n  let currentInterval = sortedIntervals[0];\n  mergedIntervals.push(currentInterval);\n\n  for (const nextInterval of sortedIntervals) {\n    const [_, currentIntervalEnd] = currentInterval;\n    const [nextIntervalStart, nextIntervalEnd] = nextInterval;\n\n    if (currentIntervalEnd >= nextIntervalStart)\n      currentInterval[1] = Math.max(currentIntervalEnd, nextIntervalEnd);\n    else {\n      currentInterval = nextInterval;\n      mergedIntervals.push(currentInterval);\n    }\n  }\n\n  return mergedIntervals;\n}\n")))}m.isMDXComponent=!0}}]);