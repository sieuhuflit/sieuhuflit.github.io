"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[34],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=r,h=p["".concat(c,".").concat(u)]||p[u]||m[u]||a;return n?o.createElement(h,i(i({ref:t},l),{},{components:n})):o.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5028:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=n(7462),r=(n(7294),n(3905));const a={},i="Composite",s={unversionedId:"design_patterns/structure_design_patterns/composite",id:"design_patterns/structure_design_patterns/composite",title:"Composite",description:"In software development, you may need to represent complex hierarchies or structures of objects where individual objects and compositions of objects share a common interface. For example, you might want to represent a tree structure of nodes, where a node can be either a leaf node (individual object) or a composite node (collection of objects).",source:"@site/docs/design_patterns/structure_design_patterns/composite.md",sourceDirName:"design_patterns/structure_design_patterns",slug:"/design_patterns/structure_design_patterns/composite",permalink:"/docs/design_patterns/structure_design_patterns/composite",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/design_patterns/structure_design_patterns/composite.md",tags:[],version:"current",lastUpdatedBy:"sieuhuflit",lastUpdatedAt:1693755249,formattedLastUpdatedAt:"Sep 3, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bridge",permalink:"/docs/design_patterns/structure_design_patterns/brigde"},next:{title:"Decorator",permalink:"/docs/design_patterns/structure_design_patterns/decorator"}},c={},d=[{value:"Solution",id:"solution",level:2},{value:"When to Use",id:"when-to-use",level:2}],l={toc:d},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"composite"},"Composite"),(0,r.kt)("h1",{id:"problem"},"Problem"),(0,r.kt)("admonition",{title:"The Composite Pattern Problem:",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"In software development, you may need to represent complex hierarchies or structures of objects where individual objects and compositions of objects share a common interface. For example, you might want to represent a tree structure of nodes, where a node can be either a leaf node (individual object) or a composite node (collection of objects)."),(0,r.kt)("p",{parentName:"admonition"},"Without the Composite Pattern, you may have to treat leaf objects and composite objects differently in your code, leading to complex conditional logic and difficulty in managing the hierarchy."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Problem: Representing a tree structure without the Composite Pattern\n\nclass TreeNode {\n  constructor(name) {\n    this.name = name;\n    this.children = [];\n  }\n\n  addChild(child) {\n    this.children.push(child);\n  }\n\n  display() {\n    console.log(`Node: ${this.name}`);\n    for (const child of this.children) {\n      child.display();\n    }\n  }\n}\n\n// Creating a tree structure\nconst root = new TreeNode("Root");\n\nconst node1 = new TreeNode("Node 1");\nconst node2 = new TreeNode("Node 2");\n\nroot.addChild(node1);\nroot.addChild(node2);\n\nconst leaf1 = new TreeNode("Leaf 1");\nconst leaf2 = new TreeNode("Leaf 2");\n\nnode1.addChild(leaf1);\nnode2.addChild(leaf2);\n\n// Displaying the tree\nroot.display();\n\n')),(0,r.kt)("p",{parentName:"admonition"},"In this code, we attempt to represent a tree structure using a TreeNode class. However, there is a problem with treating both individual nodes and leaf nodes uniformly, as each TreeNode has a children property that is not appropriate for leaf nodes.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"solution"},"Solution"),(0,r.kt)("admonition",{title:"The Composite Pattern Solution:",type:"success"},(0,r.kt)("p",{parentName:"admonition"},"The Composite Pattern allows you to compose objects into tree structures to represent part-whole hierarchies. It defines a uniform interface for both individual objects and compositions of objects. This enables you to treat individual objects and compositions of objects uniformly, simplifying the code that interacts with the hierarchy."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Solution: Using the Composite Pattern to represent a tree structure\n\n// Component Interface\nclass Component {\n  constructor(name) {\n    this.name = name;\n  }\n\n  display() {\n    throw new Error("Subclasses must implement display.");\n  }\n}\n\n// Leaf Node\nclass Leaf extends Component {\n  display() {\n    console.log(`Leaf: ${this.name}`);\n  }\n}\n\n// Composite Node\nclass Composite extends Component {\n  constructor(name) {\n    super(name);\n    this.children = [];\n  }\n\n  addChild(child) {\n    this.children.push(child);\n  }\n\n  display() {\n    console.log(`Composite Node: ${this.name}`);\n    for (const child of this.children) {\n      child.display();\n    }\n  }\n}\n\n// Creating a tree structure\nconst root = new Composite("Root");\n\nconst node1 = new Composite("Node 1");\nconst node2 = new Composite("Node 2");\n\nroot.addChild(node1);\nroot.addChild(node2);\n\nconst leaf1 = new Leaf("Leaf 1");\nconst leaf2 = new Leaf("Leaf 2");\n\nnode1.addChild(leaf1);\nnode2.addChild(leaf2);\n\n// Displaying the tree\nroot.display();\n')),(0,r.kt)("p",{parentName:"admonition"},"In this code with the Composite Pattern:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"We have separate classes for Leaf nodes (Leaf) and Composite nodes (Composite)."),(0,r.kt)("li",{parentName:"ul"},"Both Leaf and Composite nodes implement a common Component interface, allowing them to be treated uniformly."),(0,r.kt)("li",{parentName:"ul"},"The Composite class can contain child components (either Leaf or Composite), and it recursively displays its children."))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"when-to-use"},"When to Use"),(0,r.kt)("p",null,"When to Use the Composite Pattern:\nYou should consider using the Composite Pattern in the following situations:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"When you need to represent hierarchical structures of objects where individual objects and compositions of objects share a common interface."),(0,r.kt)("li",{parentName:"ol"},"When you want to treat both leaf objects and composite objects uniformly."),(0,r.kt)("li",{parentName:"ol"},"When you want to simplify client code by abstracting the complexities of the hierarchy."),(0,r.kt)("li",{parentName:"ol"},"When you want to add or remove objects from the hierarchy dynamically.")))}m.isMDXComponent=!0}}]);