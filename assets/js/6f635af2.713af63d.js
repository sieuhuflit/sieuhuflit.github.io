"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3204],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),p=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=p(r),u=a,h=c["".concat(d,".").concat(u)]||c[u]||m[u]||i;return r?n.createElement(h,o(o({ref:t},l),{},{components:r})):n.createElement(h,o({ref:t},l))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1427:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={},o="Tandem Bicycle",s={unversionedId:"easy/tandem_bicycle",id:"easy/tandem_bicycle",title:"Tandem Bicycle",description:"A tandem bicycle is a bicycle that's operated by two people: person A and person B. Both people pedal the bicycle, but the person that pedals faster dictates the speed of the bicycle. So if person A pedals at a speed of 5, and person B pedals at a speed of 4, the tandem bicycle moves at a speed of 5 (i.e., tandemSpeed = max(speedA, speedB)).",source:"@site/docs/easy/tandem_bicycle.md",sourceDirName:"easy",slug:"/easy/tandem_bicycle",permalink:"/docs/easy/tandem_bicycle",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/easy/tandem_bicycle.md",tags:[],version:"current",lastUpdatedBy:"Sieu Thai",lastUpdatedAt:1696996042,formattedLastUpdatedAt:"Oct 11, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sorted Squared Array",permalink:"/docs/easy/sorted_squared_array"},next:{title:"Tournament Winner",permalink:"/docs/easy/tournament_winner"}},d={},p=[],l={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tandem-bicycle"},"Tandem Bicycle"),(0,a.kt)("admonition",{title:"Tandem Bicycle",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"A tandem bicycle is a bicycle that's operated by two people: person A and person B. Both people pedal the bicycle, but the person that pedals faster dictates the speed of the bicycle. So if person A pedals at a speed of 5, and person B pedals at a speed of 4, the tandem bicycle moves at a speed of 5 (i.e., tandemSpeed = max(speedA, speedB))."),(0,a.kt)("p",{parentName:"admonition"},"You're given two lists of positive integers: one that contains the speeds of riders wearing red shirts and one that contains the speeds of riders wearing blue shirts. Each rider is represented by a single positive integer, which is the speed that they pedal a tandem bicycle at. Both lists have the same length, meaning that there are as many red-shirt riders as there are blue-shirt riders. Your goal is to pair every rider wearing a red shirt with a rider wearing a blue shirt to operate a tandem bicycle."),(0,a.kt)("p",{parentName:"admonition"},"Write a function that returns the maximum possible total speed or the minimum possible total speed of all of the tandem bicycles being ridden based on an input parameter, fastest. If fastest = true, your function should return the maximum possible total speed; otherwise it should return the minimum total speed."),(0,a.kt)("p",{parentName:"admonition"},'"Total speed" is defined as the sum of the speeds of all the tandem bicycles being ridden. For example, if there are 4 riders (2 red-shirt riders and 2 blue-shirt riders) who have speeds of 1, 3, 4, 5, and if they\'re paired on tandem bicycles as follows: ',"[1, 4]",", ","[5, 3]",", then the total speed of these tandem bicycles is 4 + 5 = 9."),(0,a.kt)("p",{parentName:"admonition"},"Sample Input"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"redShirtSpeeds = [5, 5, 3, 9, 2]\nblueShirtSpeeds = [3, 6, 7, 2, 1] \nfastest = true\n")),(0,a.kt)("p",{parentName:"admonition"},"Sample Output"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"32\n"))),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"// O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles\nfunction tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest) {\n  redShirtSpeeds.sort((a, b) => a - b);\n  blueShirtSpeeds.sort((a, b) => a - b);\n\n  if (!fastest) reverseArrayInPlace(redShirtSpeeds);\n\n  let totalSpeed = 0;\n  for (let idx = 0; idx < redShirtSpeeds.length; idx++) {\n    const rider1 = redShirtSpeeds[idx];\n    const rider2 = blueShirtSpeeds[blueShirtSpeeds.length - idx - 1];\n    totalSpeed += Math.max(rider1, rider2);\n  }\n\n  return totalSpeed;\n}\n\nfunction reverseArrayInPlace(array) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start < end) {\n    const temp = array[start];\n    array[start] = array[end];\n    array[end] = temp;\n    start++;\n    end--;\n  }\n}\n")))}m.isMDXComponent=!0}}]);