"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6801],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=i,p=u["".concat(l,".").concat(m)]||u[m]||g[m]||o;return t?r.createElement(p,a(a({ref:n},c),{},{components:t})):r.createElement(p,a({ref:n},c))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const o={},a="One Edit",s={unversionedId:"medium/one_edit",id:"medium/one_edit",title:"One Edit",description:"You're given two strings stringOne and stringTwo. Write a function that determines if these two strings can be made equal using only one edit.",source:"@site/docs/medium/one_edit.md",sourceDirName:"medium",slug:"/medium/one_edit",permalink:"/docs/medium/one_edit",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/medium/one_edit.md",tags:[],version:"current",lastUpdatedBy:"Sieu Thai",lastUpdatedAt:1696997124,formattedLastUpdatedAt:"Oct 11, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Number Of Ways To Make Change",permalink:"/docs/medium/number_of_ways_to_make_change"},next:{title:"Reverse Words In String",permalink:"/docs/medium/reverse_words_in_string"}},l={},d=[],c={toc:d},u="wrapper";function g(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"one-edit"},"One Edit"),(0,i.kt)("admonition",{title:"One Edit",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You're given two strings stringOne and stringTwo. Write a function that determines if these two strings can be made equal using only one edit."),(0,i.kt)("p",{parentName:"admonition"},"There are 3 possible edits:"),(0,i.kt)("p",{parentName:"admonition"},"Replace: One character in one string is swapped for a different character.\nAdd: One character is added at any index in one string.\nRemove: One character is removed at any index in one string.\nNote that both strings will contain at least one character. If the strings are the same, your function should return true."),(0,i.kt)("p",{parentName:"admonition"},"Sample Input"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},'stringOne = "hello"\nstringTwo = "hollo"\n')),(0,i.kt)("p",{parentName:"admonition"},"Sample Output"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"True // A single replace at index 1 of either string can make the strings equal\n"))),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"// O(n + m) time | O(n + m) space - where n is the length of stringOne, and\n// m is the length of stringTwo\nfunction oneEdit(stringOne, stringTwo) {\n  const lengthOne = stringOne.length;\n  const lengthTwo = stringTwo.length;\n  if (Math.abs(lengthOne - lengthTwo) > 1) return false;\n\n  for (let i = 0; i < Math.min(lengthOne, lengthTwo); i++) {\n    if (stringOne[i] !== stringTwo[i]) {\n      if (lengthOne > lengthTwo) {\n        return stringOne.slice(i + 1) === stringTwo.slice(i);\n      } else if (lengthTwo > lengthOne) {\n        return stringOne.slice(i) === stringTwo.slice(i + 1);\n      } else {\n        return stringOne.slice(i + 1) === stringTwo.slice(i + 1);\n      }\n    }\n  }\n\n  return true;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 2"',title:'"Solution','2"':!0},"// O(n) time | O(1) space - where n is the length of the shorter string\nfunction oneEdit(stringOne, stringTwo) {\n  const lengthOne = stringOne.length;\n  const lengthTwo = stringTwo.length;\n  if (Math.abs(lengthOne - lengthTwo) > 1) return false;\n\n  let madeEdit = false;\n  let indexOne = 0;\n  let indexTwo = 0;\n\n  while (indexOne < lengthOne && indexTwo < lengthTwo) {\n    if (stringOne[indexOne] !== stringTwo[indexTwo]) {\n      if (madeEdit) return false;\n      madeEdit = true;\n\n      if (lengthOne > lengthTwo) {\n        indexOne++;\n      } else if (lengthTwo > lengthOne) {\n        indexTwo++;\n      } else {\n        indexOne++;\n        indexTwo++;\n      }\n    } else {\n      indexOne++;\n      indexTwo++;\n    }\n  }\n\n  return true;\n}\n")))}g.isMDXComponent=!0}}]);