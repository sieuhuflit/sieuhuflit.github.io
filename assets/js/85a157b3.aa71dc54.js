"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5299],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),h=u(t),f=i,p=h["".concat(s,".").concat(f)]||h[f]||d[f]||l;return t?r.createElement(p,o(o({ref:n},c),{},{components:t})):r.createElement(p,o({ref:n},c))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=f;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a[h]="string"==typeof e?e:i,o[1]=a;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4928:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var r=t(7462),i=(t(7294),t(3905));const l={tags:["Binary Search Trees"]},o="BST Construction",a={unversionedId:"medium/bst_construction",id:"medium/bst_construction",title:"BST Construction",description:"Write a BST class for a Binary Search Tree. The class should support:",source:"@site/docs/medium/bst_construction.md",sourceDirName:"medium",slug:"/medium/bst_construction",permalink:"/docs/medium/bst_construction",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/medium/bst_construction.md",tags:[{label:"Binary Search Trees",permalink:"/docs/tags/binary-search-trees"}],version:"current",lastUpdatedBy:"Sieu Thai",lastUpdatedAt:1696995571,formattedLastUpdatedAt:"Oct 11, 2023",frontMatter:{tags:["Binary Search Trees"]},sidebar:"tutorialSidebar",previous:{title:"Binary Tree Diameter",permalink:"/docs/medium/binary_tree_diameter"},next:{title:"Colliding Asteroids",permalink:"/docs/medium/colliding_asteroids"}},s={},u=[],c={toc:u},h="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(h,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bst-construction"},"BST Construction"),(0,i.kt)("admonition",{title:"BST Construction",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Write a BST class for a Binary Search Tree. The class should support:"),(0,i.kt)("p",{parentName:"admonition"},"Inserting values with the insert method.\nRemoving values with the remove method; this method should only remove the first instance of a given value.\nSearching for values with the contains method.\nNote that you can't remove values from a single-node tree. In other words, calling the remove method on a single-node tree should simply not do anything."),(0,i.kt)("p",{parentName:"admonition"},"Each BST node has an integer value, a left child node, and a right child node. A node is said to be a valid BST node if and only if it satisfies the BST property: its value is strictly greater than the values of every node to its left; its value is less than or equal to the values of every node to its right; and its children nodes are either valid BST nodes themselves or None / null."),(0,i.kt)("p",{parentName:"admonition"},"Sample Usage"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"// Assume the following BST has already been created:\n         10\n       /     \\\n      5      15\n    /   \\   /   \\\n   2     5 13   22\n /           \\\n1            14\n\n// All operations below are performed sequentially.\ninsert(12):   10\n            /     \\\n           5      15\n         /   \\   /   \\\n        2     5 13   22\n      /        /  \\\n     1        12  14\n\nremove(10):   12\n            /     \\\n           5      15\n         /   \\   /   \\\n        2     5 13   22\n      /           \\\n     1            14\n\ncontains(15): true\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"class BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  insert(value) {\n    if (value < this.value) {\n      if (this.left === null) {\n        this.left = new BST(value);\n      } else {\n        this.left.insert(value);\n      }\n    } else {\n      if (this.right === null) {\n        this.right = new BST(value);\n      } else {\n        this.right.insert(value);\n      }\n    }\n    return this;\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  contains(value) {\n    if (value < this.value) {\n      if (this.left === null) {\n        return false;\n      } else {\n        return this.left.contains(value);\n      }\n    } else if (value > this.value) {\n      if (this.right === null) {\n        return false;\n      } else {\n        return this.right.contains(value);\n      }\n    } else {\n      return true;\n    }\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  remove(value, parent = null) {\n    if (value < this.value) {\n      if (this.left !== null) {\n        this.left.remove(value, this);\n      }\n    } else if (value > this.value) {\n      if (this.right !== null) {\n        this.right.remove(value, this);\n      }\n    } else {\n      if (this.left !== null && this.right !== null) {\n        this.value = this.right.getMinValue();\n        this.right.remove(this.value, this);\n      } else if (parent === null) {\n        if (this.left !== null) {\n          this.value = this.left.value;\n          this.right = this.left.right;\n          this.left = this.left.left;\n        } else if (this.right !== null) {\n          this.value = this.right.value;\n          this.left = this.right.left;\n          this.right = this.right.right;\n        } else {\n          // This is a single-node tree; do nothing.\n        }\n      } else if (parent.left === this) {\n        parent.left = this.left !== null ? this.left : this.right;\n      } else if (parent.right === this) {\n        parent.right = this.left !== null ? this.left : this.right;\n      }\n    }\n    return this;\n  }\n\n  getMinValue() {\n    if (this.left === null) {\n      return this.value;\n    } else {\n      return this.left.getMinValue();\n    }\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 2"',title:'"Solution','2"':!0},"class BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  insert(value) {\n    let currentNode = this;\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left === null) {\n          currentNode.left = new BST(value);\n          break;\n        } else {\n          currentNode = currentNode.left;\n        }\n      } else {\n        if (currentNode.right === null) {\n          currentNode.right = new BST(value);\n          break;\n        } else {\n          currentNode = currentNode.right;\n        }\n      }\n    }\n    return this;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  contains(value) {\n    let currentNode = this;\n    while (currentNode !== null) {\n      if (value < currentNode.value) {\n        currentNode = currentNode.left;\n      } else if (value > currentNode.value) {\n        currentNode = currentNode.right;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  remove(value, parentNode = null) {\n    let currentNode = this;\n    while (currentNode !== null) {\n      if (value < currentNode.value) {\n        parentNode = currentNode;\n        currentNode = currentNode.left;\n      } else if (value > currentNode.value) {\n        parentNode = currentNode;\n        currentNode = currentNode.right;\n      } else {\n        if (currentNode.left !== null && currentNode.right !== null) {\n          currentNode.value = currentNode.right.getMinValue();\n          currentNode.right.remove(currentNode.value, currentNode);\n        } else if (parentNode === null) {\n          if (currentNode.left !== null) {\n            currentNode.value = currentNode.left.value;\n            currentNode.right = currentNode.left.right;\n            currentNode.left = currentNode.left.left;\n          } else if (currentNode.right !== null) {\n            currentNode.value = currentNode.right.value;\n            currentNode.left = currentNode.right.left;\n            currentNode.right = currentNode.right.right;\n          } else {\n            // This is a single-node tree; do nothing.\n          }\n        } else if (parentNode.left === currentNode) {\n          parentNode.left = currentNode.left !== null ? currentNode.left : currentNode.right;\n        } else if (parentNode.right === currentNode) {\n          parentNode.right = currentNode.left !== null ? currentNode.left : currentNode.right;\n        }\n        break;\n      }\n    }\n    return this;\n  }\n\n  getMinValue() {\n    let currentNode = this;\n    while (currentNode.left !== null) {\n      currentNode = currentNode.left;\n    }\n    return currentNode.value;\n  }\n}\n")))}d.isMDXComponent=!0}}]);