"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3696],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),u=l(t),y=a,d=u["".concat(s,".").concat(y)]||u[y]||p[y]||i;return t?r.createElement(d,o(o({ref:n},m),{},{components:t})):r.createElement(d,o({ref:n},m))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=y;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},9890:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={tags:["Arrays"]},o="Monotonic Array",c={unversionedId:"medium/monotonic_array",id:"medium/monotonic_array",title:"Monotonic Array",description:"Write a function that takes in an array of integers and returns a boolean representing whether the array is monotonic.",source:"@site/docs/medium/monotonic_array.md",sourceDirName:"medium",slug:"/medium/monotonic_array",permalink:"/docs/medium/monotonic_array",draft:!1,editUrl:"https://github.com/sieuhuflit/sieuhuflit.github.io/tree/main/docs/medium/monotonic_array.md",tags:[{label:"Arrays",permalink:"/docs/tags/arrays"}],version:"current",lastUpdatedBy:"Sieu Thai",lastUpdatedAt:1696998432,formattedLastUpdatedAt:"Oct 11, 2023",frontMatter:{tags:["Arrays"]},sidebar:"tutorialSidebar",previous:{title:"Missing Numbers",permalink:"/docs/medium/missing_number"},next:{title:"Move Element To End",permalink:"/docs/medium/move_element_to_end"}},s={},l=[],m={toc:l},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"monotonic-array"},"Monotonic Array"),(0,a.kt)("admonition",{title:"Monotonic Array",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Write a function that takes in an array of integers and returns a boolean representing whether the array is monotonic."),(0,a.kt)("p",{parentName:"admonition"},"An array is said to be monotonic if its elements, from left to right, are entirely non-increasing or entirely non-decreasing."),(0,a.kt)("p",{parentName:"admonition"},"Non-increasing elements aren't necessarily exclusively decreasing; they simply don't increase. Similarly, non-decreasing elements aren't necessarily exclusively increasing; they simply don't decrease."),(0,a.kt)("p",{parentName:"admonition"},"Note that empty arrays and arrays of one element are monotonic."),(0,a.kt)("p",{parentName:"admonition"},"Sample Input"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n")),(0,a.kt)("p",{parentName:"admonition"},"Sample Output"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"true\n"))),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"// O(n) time | O(1) space - where n is the length of the array\nfunction isMonotonic(array) {\n  if (array.length <= 2) return true;\n\n  let direction = array[1] - array[0];\n  for (let i = 2; i < array.length; i++) {\n    if (direction === 0) {\n      direction = array[i] - array[i - 1];\n      continue;\n    }\n    if (breaksDirection(direction, array[i - 1], array[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction breaksDirection(direction, previousInt, currentInt) {\n  const difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 2"',title:'"Solution','2"':!0},"// O(n) time | O(1) space - where n is the length of the array\nfunction isMonotonic(array) {\n  let isNonDecreasing = true;\n  let isNonIncreasing = true;\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < array[i - 1]) isNonDecreasing = false;\n    if (array[i] > array[i - 1]) isNonIncreasing = false;\n  }\n\n  return isNonDecreasing || isNonIncreasing;\n}\n")))}p.isMDXComponent=!0}}]);